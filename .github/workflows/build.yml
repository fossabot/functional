name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-22.04
    container: fedora:39
    strategy:
      fail-fast: false
      matrix:
        platform:
        - linux
        configuration:
        - Debug
        - Release
        compiler:
        - clang
        - gcc
    steps:
    - name: Install prerequisites
      run: |
        dnf -y update
        dnf -y install git cmake ninja-build clang gcc gcc-c++ libstdc++-static

    # To enable submodules, git must be installed before actions/checkout@v3
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    # We need gcovr for coverage reporting, when in Debug mode
    - name: Prepare gcovr
      if: ${{ matrix.configuration == 'Debug' && matrix.compiler == 'gcc' }}
      run: |
        dnf -y install python3.11
        python3.11 -m venv /venv
        PATH=/venv/bin:${PATH} pip --no-cache-dir install 'gcovr<7'
        echo "/venv/bin" >> $GITHUB_PATH

    - name: Cleanup installation files
      run: |
        dnf -y clean all

    - name: Verify compiler compatibility
      env:
        SOURCE: |
          #include <optional>
          #include <expected>
          #include <cstdio>
          int main() {
            using type1=std::expected<int, const char*>;
            using type2=std::optional<int>;
            return type1{1}.and_then([](int i) -> type1 { std::puts("OK expected"); return {i-1}; }).value()
              + type2{2}.and_then([](int i) -> type2 { std::puts("OK optional"); return {i-2}; }).value();
          }
      run: |
        FILE=$(mktemp --tmpdir XXXXXX.cpp)
        printf "$SOURCE\n" > $FILE
        OUT=$(mktemp --tmpdir  XXXXXX)
        g++ -std=c++23 -Wall $FILE -o $OUT
        $OUT

    - name: Prepare build
      env:
        COVERAGE: ${{ (matrix.configuration == 'Debug' && matrix.compiler == 'gcc') && 'ON' || 'OFF' }}
        CMAKE_GENERATOR: Ninja
        CC: ${{ matrix.compiler == 'gcc' && '/usr/bin/gcc' || ' /usr/bin/clang' }}
        CXX: ${{ matrix.compiler == 'gcc' && '/usr/bin/g++' || ' /usr/bin/clang++' }}
      run: |
        mkdir .build
        cd .build
        cmake -DCOVERAGE=${COVERAGE} -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
        COMPILER=$( grep "CMAKE_CXX_COMPILER:FILEPATH" CMakeCache.txt | grep -oE "/usr/bin/.*$" )
        printf "C++ compiler: %s\nC++ compiler version: %s\n" "$COMPILER" "$( $COMPILER --version | head -1 )"

    # In Debug mode on gcc compiler, this step also runs tests and prepares coverage report
    - name: Build all
      env:
        TARGET: ${{ (matrix.configuration != 'Debug' || matrix.compiler != 'gcc') && 'all' || ' coverage' }}
      run: |
        cd .build
        ln -s ../external/catch2/src src # gcov workaround
        cmake --build . --target ${TARGET}

    - name: Run tests
      if: ${{ matrix.configuration != 'Debug' || matrix.compiler != 'gcc' }}
      run: |
        cd .build
        ctest --output-on-failure

    - name: Upload coverage report
      if: ${{ matrix.configuration == 'Debug' && matrix.compiler == 'gcc' }}
      uses: wandalen/wretry.action@v1.3.0
      with:
        action: codecov/codecov-action@v3
        with: |
          files: .build/coverage.xml 
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
        attempt_limit: 5
        attempt_delay: 10000

