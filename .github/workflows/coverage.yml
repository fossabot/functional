name: coverage

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-22.04
    container: gcc:13.2-bookworm
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Install prerequisites
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        apt-get update -y
        apt-get install -y --no-install-recommends cmake ninja-build python3-pip python3-venv
        apt-get clean -y

    # We need gcovr for coverage reporting
    - name: Prepare gcovr
      run: |
        python3 -m venv /venv
        PATH=/venv/bin:${PATH} pip --no-cache-dir install 'gcovr<7'
        echo "/venv/bin" >> $GITHUB_PATH

    - name: Verify compiler compatibility
      env:
        SOURCE: |
          #include <optional>
          #include <expected>
          #include <cstdio>
          int main() {
            using type1=std::expected<int, const char*>;
            using type2=std::optional<int>;
            return type1{1}.and_then([](int i) -> type1 { std::puts("OK expected"); return {i-1}; }).value()
              + type2{2}.and_then([](int i) -> type2 { std::puts("OK optional"); return {i-2}; }).value();
          }
      run: |
        FILE=$(mktemp --tmpdir XXXXXX.cpp)
        printf "$SOURCE\n" > $FILE
        OUT=$(mktemp --tmpdir  XXXXXX)
        g++ -std=c++23 -Wall $FILE -o $OUT
        $OUT

    - name: Prepare build
      env:
        CMAKE_GENERATOR: Ninja
        CC: /usr/local/bin/gcc
        CXX: /usr/local/bin/g++
      run: |
        mkdir .build
        cd .build
        cmake -DCOVERAGE=ON -DCMAKE_BUILD_TYPE=Debug ..
        COMPILER=$( grep "CMAKE_CXX_COMPILER:FILEPATH" CMakeCache.txt | sed "s|CMAKE_CXX_COMPILER:FILEPATH=/|/|" )
        printf "C++ compiler: %s\nC++ compiler version: %s\n" "$COMPILER" "$( $COMPILER --version | head -1 )"

    - name: Run coverage target
      run: |
        cd .build
        ln -s ../external/catch2/src src # gcov workaround
        cmake --build . --target coverage

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        files: .build/coverage.xml
        fail_ci_if_error: true
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
